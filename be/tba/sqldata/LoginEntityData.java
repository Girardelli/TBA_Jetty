/*
 * Generated by XDoclet - Do not edit!
 */
package be.tba.sqldata;

import java.util.Calendar;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import be.tba.test.AnyTest;

/**
 * Data object for AccountEntity.
 *
 * @xdoclet-generated at 1-01-15
 */
public class LoginEntityData extends be.tba.sqldata.AbstractData
{
   final static Logger log = LoggerFactory.getLogger(LoginEntityData.class);
   /**
    *
    */
   private static final long serialVersionUID = 1L;

   private int id;
   private String name;
   private String userId;
   private String password;
   private String role;
   private int custFilter;
   private String stateFilter;
   private String dirFilter;
   private String lastLogin;
   private long lastLoginTS;
   private long previousLoginTS;
   private boolean isRegistered;
   private int accountId;

   public LoginEntityData()
   {
      isRegistered = false;
      lastLogin = "";
   }

   public LoginEntityData(LoginEntityData otherData)
   {
      set(otherData);
   }

   public void set(LoginEntityData otherData)
   {
      setId(otherData.getId());
      setName(otherData.getName());
      setUserId(otherData.getUserId());
      setPassword(otherData.getPassword());
      setAccountId(otherData.getAccountId());
      setRole(otherData.getRole());
      setCustFilter(otherData.getCustFilter());
      setStateFilter(otherData.getStateFilter());
      setDirFilter(otherData.getDirFilter());
      setLastLogin(otherData.getLastLogin());
      setLastLoginTS(otherData.getLastLoginTS());
      setPreviousLoginTS(otherData.getPreviousLoginTS());
      setIsRegistered(otherData.getIsRegistered());
   }

   public int getId()
   {
      return this.id;
   }

   public void setId(int id)
   {
      this.id = id;
   }

   public String getName()
   {
      return this.name;
   }

   public void setName(String name)
   {
      this.name = name;
   }

   public String getUserId()
   {
      return this.userId;
   }

   public void setUserId(String userId)
   {
      this.userId = userId;
   }

   public String getPassword()
   {
      return this.password;
   }

   public void setPassword(String password)
   {
      this.password = password;
   }

   public int getAccountId()
   {
      return this.accountId;
   }

   public void setAccountId(int accountId)
   {
      this.accountId = accountId;
   }

   public String getRole()
   {
      return this.role;
   }

   public void setRole(String role)
   {
      this.role = role;
   }

   public int getCustFilter()
   {
      return this.custFilter;
   }

   public void setCustFilter(int custFilter)
   {
      this.custFilter = custFilter;
   }

   public String getStateFilter()
   {
      return this.stateFilter;
   }

   public void setStateFilter(String stateFilter)
   {
      this.stateFilter = stateFilter;
   }

   public String getDirFilter()
   {
      return this.dirFilter;
   }

   public void setDirFilter(String dirFilter)
   {
      this.dirFilter = dirFilter;
   }

   public String getLastLogin()
   {
      return this.lastLogin;
   }

   public void setLastLogin(String lastLogin)
   {
      this.lastLogin = lastLogin;
   }

   public long getLastLoginTS()
   {
      return this.lastLoginTS;
   }

   public void setLastLoginTS(long lastLoginTS)
   {
      this.lastLoginTS = lastLoginTS;
   }

   public long getPreviousLoginTS()
   {
      return this.previousLoginTS;
   }

   public void setPreviousLoginTS(long previousLoginTS)
   {
      this.previousLoginTS = previousLoginTS;
   }

   public boolean getIsRegistered()
   {
      return this.isRegistered;
   }

   public void setIsRegistered(boolean isRegistered)
   {
      this.isRegistered = isRegistered;
   }

   public String toNameValueString()
   {
      StringBuffer str = new StringBuffer();

      str.append("',Name='");
      str.append(((this.name != null) ? this.name : ""));
      str.append("',UserId='");
      str.append(((this.userId != null) ? this.userId : ""));
      str.append("',Password='");
      str.append(((this.password != null) ? this.password : ""));
      str.append("',AccountId=");
      str.append(this.accountId);
      str.append(",Role='");
      str.append(((this.role != null) ? this.role : ""));
      str.append("',CustFilter=");
      str.append(this.custFilter);
      str.append(",StateFilter='");
      str.append(((this.stateFilter != null) ? this.stateFilter : ""));
      str.append("',DirFilter='");
      str.append(((this.dirFilter != null) ? this.dirFilter : ""));
      str.append("',LastLogin='");
      str.append(((this.lastLogin != null) ? this.lastLogin : ""));
      str.append("',LastLoginTS=");
      str.append(getLastLoginTS());
      str.append(",PrevLoginTS=");
      str.append(getPreviousLoginTS());
      str.append(",IsRegistered=");
      str.append(getIsRegistered());
      return (str.toString());

   }

   public String toValueString()
   {
      StringBuffer str = new StringBuffer();

      // "(1, '409031', '04/10/05', 1128528272192, 1, 220, 0, 'Nabelactie voor
      // client'. ',0 ,0 ,0 ,0 ,'')
      str.append("'0','");
      str.append(((this.name != null) ? this.name : ""));
      str.append("','");
      str.append(((this.userId != null) ? this.userId : ""));
      str.append("','");
      str.append(((this.password != null) ? this.password : ""));
      str.append("',");
      str.append(this.accountId);
      str.append(",'");
      str.append(((this.role != null) ? this.role : ""));
      str.append("',");
      str.append(this.custFilter);
      str.append(",'");
      str.append(((this.stateFilter != null) ? this.stateFilter : ""));
      str.append("','");
      str.append(((this.dirFilter != null) ? this.dirFilter : ""));
      str.append("','");
      str.append(((this.lastLogin != null) ? this.lastLogin : ""));
      str.append("',");
      str.append(getLastLoginTS());
      str.append(",");
      str.append(getPreviousLoginTS());
      str.append(",");
      str.append(getIsRegistered());
      return (str.toString());
   }

   public boolean equals(Object pOther)
   {
      if (pOther instanceof LoginEntityData)
      {
         LoginEntityData lTest = (LoginEntityData) pOther;
         return this.id == lTest.id;
      }
      else
      {
         return false;
      }
   }

   public int hashCode()
   {
      int result = 17;

      result = 37 * result + (int) id;

      result = 37 * result + ((this.userId != null) ? this.userId.hashCode() : 0);

      result = 37 * result + ((this.password != null) ? this.password.hashCode() : 0);

      return result;
   }

   static public String getLoginCode(int accountId)
   {
      Calendar calendar = Calendar.getInstance();
      String loginNr = String.format("%04d%06d", accountId, calendar.getTimeInMillis() / 1000 / 60 / 60);
      long code = Long.parseUnsignedLong(loginNr);
      long checkDigit = code % 7;
      return loginNr + checkDigit;
   }

   static public int checkLoginCode(String code)
   {
      if (code == null || code.length() != 11)
      {
         log.warn("wrong code provided. null or not expected length of 11: " + code);
         return -1;
      }
      Calendar calendar = Calendar.getInstance();
      long checkTest = Long.parseUnsignedLong(code.substring(10));
      long codeTest = Long.parseUnsignedLong(code.substring(0, 10));

      if (codeTest % 7 != checkTest)
      {
         log.warn("checksum failed: " + codeTest + ", " + checkTest);
         return -1;
      }
      String timeRetr = code.substring(4, 10);
      long codeTime = Long.parseUnsignedLong(timeRetr);

      long now = calendar.getTimeInMillis() / 1000 / 60 / 60;
      if (now - codeTime > 168) // 7 days
      {
         log.warn("code expired: " + (now - codeTime) + "hours");
         return -1;
      }
      return Integer.parseInt(code.substring(0, 4));
   }
}
